1 АРХІТЕКТУРА СИСТЕМИ

Архітектура системи визначає загальну структуру програмного забезпечення, його основні компоненти та взаємодію між ними. Вона включає в себе компоненти, модулі, інтерфейси та дані, що обробляються системою. У цьому розділі буде описано загальну архітектуру системи, її складові частини та спосіб їх взаємодії.
Система управління маршрутами метро призначена для оптимізації роботи метрополітену, забезпечуючи ефективне планування, управління та моніторинг руху потягів. Вона дозволяє автоматизувати процеси розробки розкладів, контролю руху, управління станціями. Завдяки системі управління маршрутами метро підвищується точність дотримання графіку, знижується ймовірність затримок і покращується загальний рівень обслуговування пасажирів. UseCase діаграму показано на рисунку 2.1
Рисунок 2.1 – Use case діаграма
Загалом, UseCase діаграма є важливим інструментом для планування і розробки системи управління маршрутами метро, оскільки вона допомагає забезпечити чітке розуміння функціональних можливостей і процесів, що мають бути реалізовані для успішного управління рухом потягів і забезпечення високого рівня обслуговування пасажирів.
Створення ER-діаграми є важливим кроком у розробці бази даних, оскільки вона допомагає визначити основну структуру даних, забезпечити їх цілісність та уникнути можливих аномалій. Завдяки ER-діаграмі (див. рис. 2.2) можна більш ефективно спланувати процеси зберігання та обробки даних, що є критично важливим для забезпечення надійної роботи системи управління маршрутами метро.
Рисунок 2.2 - ER-діаграма
Діаграма пакетів дозволяє розробникам і архітекторам системи зрозуміти, як функціональні модулі взаємодіють між собою, і забезпечити модульність та масштабованість системи. Вона також сприяє полегшенню командної роботи, оскільки чітко визначає межі відповідальності між різними командами розробників. Завдяки діаграмі пакетів (див. рис. 2.3) можна забезпечити ефективну організацію коду, полегшити його супроводження та розвиток у майбутньому.
Рисунок 2.3 – Діаграма пакетів
Використання діаграми діяльності дозволяє деталізувати складні процеси і зробити їх зрозумілими як для розробників, так і для кінцевих користувачів системи. Це є важливим етапом у розробці та впровадженні системи управління маршрутами метро, оскільки допомагає виявити потенційні проблеми та вузькі місця, які можуть вплинути на ефективність і надійність системи. Діаграму показано на рисунку 2.4.
Рисунок 2.4 – Діаграма діяльності
У контексті системи управління маршрутами метро, діаграма компонентів (див. рис. 2.5) дозволяє показати, як різні функціональні модулі інтегруються в єдину систему, а також визначити їх залежності і взаємодію.
Рисунок 2.5 – Діаграма компонентів
Діаграма компонентів дозволяє чітко уявити фізичну архітектуру системи, показуючи, як окремі частини програмного забезпечення взаємодіють і об'єднуються в єдину систему. Це сприяє кращому розумінню того, як повинні бути реалізовані і розгорнуті компоненти, забезпечуючи їх ефективну взаємодію і відповідність вимогам системи управління маршрутами метро.

2 ОПИС ІНТЕРФЕЙСУ

У системі існує багато сторінок. Нижче буде розписано усі сторінки системи.
Сторінка ліній метро. На цій сторінці відображається інформація про всі лінії метро. Користувачі можуть переглядати список доступних ліній, а також деталі кожної лінії. Адміністратори можуть додавати нові лінії, редагувати існуючі або видаляти непотрібні. Компоненти: список ліній, форма додавання/редагування лінії.
Сторінка платформ. Ця сторінка відображає інформацію про платформи на різних станціях метро. Користувачі можуть переглядати розташування платформ та інші важливі дані. Адміністратори можуть управляти даними платформ, додавати нові, редагувати або видаляти існуючі. Компоненти: список платформ, форма додавання/редагування платформ.
Сторінка розкладів. На цій сторінці представлено розклад руху потягів. Користувачі можуть переглядати розклади для різних ліній та станцій. Адміністратори мають можливість редагувати розклади, додавати нові маршрути або видаляти існуючі. Компоненти: список розкладів, форма додавання/редагування розкладів.
Сторінка персоналу. Ця сторінка містить інформацію про персонал, який обслуговує метро. Користувачі можуть переглядати список співробітників, їхні посади та контактні дані. Адміністратори можуть управляти даними про персонал, додавати нових співробітників, редагувати інформацію про них або видаляти непотрібні записи. Компоненти: список співробітників, форма додавання/редагування співробітників.
Сторінка станцій. На цій сторінці відображається інформація про станції метро. Користувачі можуть переглядати деталі про кожну станцію, включаючи назву та інші дані. Адміністратори можуть додавати нові станції, редагувати інформацію про існуючі або видаляти станції. Компоненти: список станцій, форма додавання/редагування станцій.
Сторінка потігів. Ця сторінка містить інформацію про потяги, які курсують по маршрутах метро. Користувачі можуть переглядати список потягів та їхні деталі. Адміністратори можуть управляти даними про потяги, додавати нові, редагувати інформацію про існуючі або видаляти непотрібні записи. Компоненти: список потягів, форма додавання/редагування потягів.
Сторінка карти метро. На цій сторінці користувач може у реальному часі переглядати де знаходяться потяги на карті. На сторінці представлена карта метро з списком ліній та станціями, а також зеленими кружечками (потягами.)

3 ВИКОРИСТАННЯ ТЕХНОЛОГІЙ

Для розробки клієнтської частини використовувалося багато технології. Нижче одні з основних.
TypeScript [2] — це мова програмування, що розширює можливості JavaScript, додаючи статичну типізацію. Основні переваги TypeScript [2]:
–	статична типізація: дозволяє виявляти помилки під час компіляції, що знижує кількість помилок на етапі виконання;
–	розширення можливостей IDE: завдяки типізації, забезпечує покращене автозаповнення, рефакторинг та навігацію по коду;
–	сумісність з JavaScript: TypeScript [2] компілюється в чистий JavaScript, що дозволяє використовувати його в будь-яких проектах, де вже використовується JavaScript.
React [3] — це бібліотека для створення користувацьких інтерфейсів. Основні особливості React:
–	компонентний підхід: дозволяє розбивати інтерфейс на незалежні, повторно використовувані компоненти, що спрощує розробку та підтримку коду;
–	віртуальний DOM: підвищує продуктивність за рахунок мінімізації маніпуляцій з реальним DOM;
–	одностороння прив'язка даних: полегшує розуміння потоку даних та поліпшує прогнозованість поведінки додатку.
React Bootstrap [1] — це бібліотека компонентів інтерфейсу, створена на основі популярного CSS-фреймворку Bootstrap [1]. Основні переваги React Bootstrap:
–	інтеграція з React [3]: компоненти бібліотеки створені спеціально для використання з React, що забезпечує їхню сумісність та легкість у використанні;
–	популярний стиль: Bootstrap є одним з найпопулярніших фреймворків для розробки адаптивних веб-додатків, що забезпечує сучасний та привабливий вигляд інтерфейсу;
–	адаптивний дизайн: компоненти Bootstrap [1] забезпечують адаптивність інтерфейсу для різних розмірів екранів та пристроїв.
Інші інструменти та бібліотеки
Webpack: інструмент для збірки модулів, який дозволяє ефективно управляти залежностями та оптимізувати код для продакшн середовища.
Prettier: інструмент для автоматичного форматування коду, що допомагає підтримувати єдиний стиль написання коду у команді.
Ці технології забезпечать створення надійної, масштабованої та легко підтримуваної клієнтської частини системи керування маршрутами метро.
У системі існує функція normalizeLines (див. додаток А.1). Давайте детально розглянемо цей фрагмент коду, написаний на TypeScript [2] з використанням React [3]. Він перетворює дані про лінії метро та їхні станції у формат, придатний для малювання на карті. Вихідні дані будуть у форматі ILineDraw, де кожна лінія має масив станцій з середніми координатами. Використання useMemo забезпечує мемоізацію обчисленого значення. Це означає, що normalizeLines буде повторно обчислено лише тоді, коли зміниться масив lines. Це підвищує продуктивність, запобігаючи непотрібним повторним обчисленням.
Цей код створює мемоізовану версію нормалізованих даних для відображення ліній метро та їх станцій з розрахованими середніми координатами для кожної станції. Це забезпечує ефективне управління станами та мінімізує непотрібні перерахунки у React-компонентах.

Висновки

У процесі роботи була розроблена клієнтська частина програмної системи для керування маршрутами метро, яка забезпечує зручний та інтуїтивно зрозумілий інтерфейс користувача. Система дозволяє пасажирам переглядати розклад потягів, отримувати інформацію про станції та поточний стан маршрутів. Оператори отримали інструменти для адміністрування потягів, що включає можливість додавання, редагування та видалення інформації про потяги, а також керування розкладом та маршрутами.
Використання сучасних технологій у розробці клієнтської частини дозволило створити ефективний та надійний інтерфейс, що відповідає вимогам користувачів і забезпечує високу продуктивність системи. Реалізація поставлених завдань сприяла поліпшенню управління маршрутами метро, підвищенню точності і своєчасності руху потягів, а також покращенню обслуговування пасажирів.
Розроблена система є важливим кроком у напрямку цифровізації управління міським транспортом, що дозволяє забезпечити більш ефективну і надійну роботу метрополітену, зменшити кількість затримок і покращити загальний досвід користувачів.
