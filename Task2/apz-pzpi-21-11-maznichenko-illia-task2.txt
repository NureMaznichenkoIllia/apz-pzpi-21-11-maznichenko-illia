1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Розробка концептуальної моделі для системи управління маршрутами метро включає в себе детальне вивчення предметної області з метою визначення основних сутностей, взаємозв'язків та властивостей, які характеризують цю систему.
Під час розробки концептуальної моделі необхідно враховувати всі аспекти функціонування метрополітену: від пасажирських потоків та графіків руху поїздів до архітектури станцій та маршрутів.
За допомогою концептуальної моделі можемо визначити ключові абстрактні об'єкти, такі як "маршрути", "станції", "поїзди" та інші. Також ми можемо встановити взаємозв'язки між цими об'єктами, наприклад, які станції входять у склад певного маршруту.
Крім того, концептуальна модель дозволяє визначити атрибути кожної сутності, такі як назва маршруту, розклад руху поїзда тощо.
Загалом, розробка концептуальної моделі є першим важливим кроком у процесі розробки серверної частини системи управління маршрутами метро, оскільки вона надає загальне уявлення про область проблеми та визначає основи для подальших робіт з проектування та реалізації.
У висвітленому вище контексті системи управління маршрутами метро важливим етапом у процесі розробки є аналіз функціональних потреб користувачів та визначення ключових дій, які вони здійснюватимуть у системі. Для цього використовуємо use case-діаграму, яка допомагає визначити основні сценарії взаємодії користувачів та системи.
На діаграмі (див. рис. 1.1) представлені різні варіанти використання системи, що описуються у вигляді use cases. Кожен use case відображає конкретну функціональну можливість системи та дії, які виконуються користувачами або іншими системними акторами. Це дозволяє нам краще зрозуміти, як користувачі будуть взаємодіяти з системою та як система буде реагувати на їхні запити.
Під час подальшого проектування та розробки системи use case-діаграма слугуватиме основою для визначення функціональних вимог до системи та визначення необхідних компонентів та їх взаємодії. Такий підхід дозволить створити систему, яка ефективно задовольняє потреби користувачів та відповідає вимогам предметної області.
Рисунок 1.1 – Use case діаграма
Після вивчення use case-діаграми було отримано чітке уявлення про функціональні можливості системи управління маршрутами метро та взаємодію її компонентів з користувачами та іншими системами. На цьому етапі ми готові переходити до подальшого проектування та розробки системи, враховуючи виявлені вимоги та сценарії використання. Детальне проектування та реалізація кожного з use case-ів дозволять нам створити функціонально повну та ефективну систему, що задовольняє потреби користувачів та відповідає вимогам предметної області

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Перед діаграмою розгортання системи управління маршрутами метро важливо розглянути архітектурні аспекти розміщення програмного забезпечення та обладнання. Діаграма розгортання показує фізичну структуру системи та взаємозв'язки між її компонентами на рівні обладнання. Кожен вузол розгортання представляє окремий об'єкт або компонент системи, що виконує певні функції.
У випадку системи управління маршрутами метро, діаграма розгортання включає такі елементи:
–	серверні вузли - вузли представляють сервери, на яких розгортане серверне програмне забезпечення системи, такі як веб-сервер та база даних. Вони відповідають за обробку запитів від клієнтів та забезпечення доступу до даних;
–	клієнтські вузли - вузли відображають пристрої або додатки, які використовуються користувачами для взаємодії з системою, такі як мобільні додатки та веб-браузери;
–	бази даних - вузли відображають сервери баз даних, які використовуються для зберігання даних системи.
Рисунок 1.4 – Діаграма розгортання
Після діаграми розгортання стає очевидною структура системи та взаємозв'язки між її компонентами.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверна частина системи управління маршрутами метро відіграє ключову роль у забезпеченні ефективної та надійної роботи системи. Її функціональність охоплює обробку запитів від клієнтських додатків, взаємодію з базою даних для зберігання та оновлення інформації про маршрути, станції, платформи, поїзди, розклади та персонал метрополітену.
Ця частина системи реалізована з використанням принципів архітектури RESTful API, що дозволяє забезпечити зручний та стандартизований доступ до функцій системи через HTTP-протокол. Для розробки серверної частини використувуються сучасні мови програмування та фреймворки, такі як: C# з ASP.NET Core, Entity Frameworw, .NET 5.
Основні завдання серверної частини включають обробку запитів на отримання, створення, оновлення та видалення інформації про маршрути, станції та інші елементи метрополітену, а також забезпечення відповідного функціоналу для адміністрування системи та моніторингу її роботи.
Діаграма пакетів відображає модульну структуру системи та відносини між її компонентами. Кожен пакет представляє логічно пов'язаний набір класів, які виконують певну функціональність. У системі управління маршрутами метро можуть бути такі основні пакети:
–	керування маршрутами - пакет відповідає за управління маршрутами метро, включаючи створення, редагування та видалення маршрутів, а також надання інформації про них.
–	керування станціями і платформами - в цьому пакеті реалізована функціональність для управління станціями та платформами метро, включаючи їх створення, редагування та видалення, а також управління розкладами руху поїздів на платформах.
–	управління поїздами і графіками - пакет відповідає за управління поїздами метро, включаючи їх реєстрацію, редагування та видалення, а також керування графіками руху поїздів.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Рисунок 1.1 – Use case діаграма
Після вивчення use case-діаграми було отримано чітке уявлення про функціональні можливості системи управління маршрутами метро та взаємодію її компонентів з користувачами та іншими системами. На цьому етапі ми готові переходити до подальшого проектування та розробки системи, враховуючи виявлені вимоги та сценарії використання. Детальне проектування та реалізація кожного з use case-ів дозволять нам створити функціонально повну та ефективну систему, що задовольняє потреби користувачів та відповідає вимогам предметної області

5 ПОБУДОВА ER-ДІАГРАМИ

Перед нами представлена ER-діаграма (див. рис. 1.2) бази даних системи управління маршрутами метро. Ця діаграма відображає сутності, їх атрибути та зв'язки між ними. Ретельний аналіз цієї структури дозволить нам краще зрозуміти, як буде організована інформація в базі даних та як вона буде використовуватися в системі.
Отвідно до теми "Система управління маршрутами метро", визначено наступний перелік атрибутів для сутностей:
–	лінія метро – id, назва. У цієї сутності первинний ключ id;
–	платформа – id, назва, нотатки, станція. У цієї сутності первинний ключ id;
–	розклад – id, платформа, поїзд, дата прибуття, дата відправки. У цієї сутності первинний ключ id;
–	персонал – id, ім’я, прізвище, номер телефону, станція. У цієї сутності первинний ключ id;
–	станція – id, назва, ліва позиція по X, ліва позиція по Y, права позиція по X, права позиція по Y, лінія метро. У цієї сутності первинний ключ id;
–	поїзд – id, назва, модель, кількість місць, поточна позиція по X, поточна позиція по Y. У цієї сутності первинний ключ id.
Зв'язки між сутностями:
–	лінія – станція – зв’язок один до багатьох. У лінії метро може бути багато станцій;
–	станція – платформа – зв'язок один до багатьох. Станція має багато платформ;
–	платформа – розклад – зв'язок один до багатьох. На платформі є список розкладу поїздів;
–	розклад – поїзд – зв'язок один до багатьох. Поїзд має багато розкладів;
–	станція – персонал – зв'язок один до багатьох. Багато персоналу на кожній станції.

6 СПЕЦИФІКАЦІЯ REST

Лінії метро:
– GET /api/Lines - Отримати список ліній метро;
– POST /api/Lines - Створити нову лінію метро;
– GET /api/Lines/{id} - Отримати конкретну лінію метро за її ідентифікатором;
– PUT /api/Lines/{id} - Оновити інформацію про лінію метро за її ідентифікатором;
– DELETE /api/Lines/{id} - Видалити лінію метро за її ідентифікатором.
Платформи:
– GET /api/Platforms - Отримати список платформ;
– POST /api/Platforms - Створити нову платформу;
– GET /api/Platforms/{id} - Отримати конкретну платформу за її ідентифікатором;
– PUT /api/Platforms/{id} - Оновити інформацію про платформу за її ідентифікатором;
– DELETE /api/Platforms/{id} - Видалити платформу за її ідентифікатором.
Розклади:
– GET /api/Schedules - Отримати список розкладів;
– POST /api/Schedules - Створити новий розклад;
– GET /api/Schedules/{id} - Отримати конкретний розклад за його ідентифікатором;
– PUT /api/Schedules/{id} - Оновити інформацію про розклад за його ідентифікатором;
– DELETE /api/Schedules/{id} - Видалити розклад за його ідентифікатором.
Персонал:
– GET /api/Staffs - Отримати список персоналу;
– POST /api/Staffs - Створити нового працівника;
– GET /api/Staffs/{id} - Отримати конкретного працівника за його ідентифікатором;
– PUT /api/Staffs/{id} - Оновити інформацію про працівника за його ідентифікатором;
– DELETE /api/Staffs/{id} - Видалити працівника за його ідентифікатором.
Станції:
– GET /api/Stations - Отримати список станцій;
– POST /api/Stations - Створити нову станцію;
– GET /api/Stations/{id} - Отримати конкретну станцію за її ідентифікатором;
– PUT /api/Stations/{id} - Оновити інформацію про станцію за її ідентифікатором;
– DELETE /api/Stations/{id} - Видалити станцію за її ідентифікатором.
Поїзди:
– GET /api/Trains - Отримати список поїздів;
– POST /api/Trains - Створити новий поїзд;
– GET /api/Trains/{id} - Отримати конкретний поїзд за його ідентифікатором;
– PUT /api/Trains/{id} - Оновити інформацію про поїзд за його ідентифікатором;
– DELETE /api/Trains/{id} - Видалити поїзд за його ідентифікатором.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Побудова діаграми компонентів є важливим етапом проектування нашої системи управління маршрутами метро. Ця діаграма дозволяє чітко уявити основні компоненти системи та їх взаємозв'язки. Для нашої системи, яка включає серверну частину, кілька підсистем, базу даних та клієнтські додатки, діаграма компонентів є ключовим інструментом для визначення ролей і відповідальності кожного компонента.
Основні компоненти системи
Серверна частина (Backend Server):
Web API: Обробка HTTP-запитів, створення, читання, оновлення та видалення (CRUD) даних.
Data Access Layer: Взаємодія з базою даних за допомогою Entity Framework.
Business Logic Layer: Обробка бізнес-логіки, яка забезпечує правильність даних і логіку функціонування системи.
База даних (Database Server):
SQL Server: Зберігання даних про маршрути, станції, платформи, розклади, персонал та поїзди.
Клієнтські додатки (Client Applications):
Мобільний додаток: Інтерфейс для користувачів, що дозволяє переглядати розклад, маршрути та іншу інформацію.
Веб-інтерфейс: Веб-додаток для управління системою та доступу до інформації про метро.
Адміністративний інтерфейс (Admin Interface):
Web Admin Panel: Інтерфейс для адміністраторів системи, що дозволяє керувати маршрутами, станціями, поїздами та персоналом.

ВИСНОВКИ 

У результаті виконання лабораторної роботи було досягнуто поставленої мети створення надійної та ефективної серверної частини для системи управління маршрутами метро. Шляхом розробки архітектури серверної інфраструктури, створення API для взаємодії з клієнтськими додатками та реалізації необхідного функціоналу, включаючи керування маршрутами та оптимізацію системи, було досягнуто високої швидкодії та масштабованості системи. Результати цієї роботи будуть важливим внеском у розвиток та покращення існуючих систем управління маршрутами метро.


