1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Опис побудови бази даних в системі управління маршрутами метро є важливим кроком у процесі розробки, оскільки вона забезпечує ефективне зберігання та організацію інформації, необхідної для функціонування системи. У цьому етапі буде розглянуто структуру бази даних, визначено сутності та їх взаємозв'язки, щоб підготувати фундамент для подальшої розробки системи.Перед нами представлена ER-діаграма (див. рис. 1.2) бази даних системи управління маршрутами метро. Ця діаграма відображає сутності, їх атрибути та зв'язки між ними. Ретельний аналіз цієї структури дозволить нам краще зрозуміти, як буде організована інформація в базі даних та як вона буде використовуватися в системі.Діаграма визначає структуру даних і взаємозв'язки між ними, що допоможе нам ефективно зберігати та отримувати інформацію, необхідну для роботи системи.
Відповідно до теми "Система управління маршрутами метро", визначено наступний перелік атрибутів для сутностей:
– лінія метро 
– id, назва. У цієї сутності первинний ключ id;
– платформа – id, назва, нотатки, станція. У цієї сутності первинний ключ id;
– розклад – id, платформа, поїзд, дата прибуття, дата відправки. У цієї сутності первинний ключ id;
– персонал – id, ім’я, прізвище, номер телефону, станція. У цієї сутності первинний ключ id;
– станція – id, назва, ліва позиція по X, ліва позиція по Y, права позиція по X, права позиція по Y, лінія метро. У цієї сутності первинний ключ id;
– поїзд – id, назва, модель, кількість місць, поточна позиція по X, поточна позиція по Y. У цієї сутності первинний ключ id.
Зв'язки між сутностями:
– лінія – станція – зв’язок один до багатьох. У лінії метро може бути багато станцій;
– станція – платформа – зв'язок один до багатьох. Станція має багато платформ;
– платформа – розклад – зв'язок один до багатьох. На платформі є список розкладу поїздів;
– розклад – поїзд – зв'язок один до багатьох. Поїзд має багато розкладів;
– станція – персонал – зв'язок один до багатьох. Багато персоналу на кожній станції.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

5 ПОБУДОВА ER-ДІАГРАМИ

6 СПЕЦИФІКАЦІЯ REST

Лінії метро:
– GET /api/Lines - Отримати список ліній метро;
– POST /api/Lines - Створити нову лінію метро;
– GET /api/Lines/{id} - Отримати конкретну лінію метро за її ідентифікатором;
– PUT /api/Lines/{id} - Оновити інформацію про лінію метро за її ідентифікатором;
– DELETE /api/Lines/{id} - Видалити лінію метро за її ідентифікатором.
Платформи:
– GET /api/Platforms - Отримати список платформ;
– POST /api/Platforms - Створити нову платформу;
– GET /api/Platforms/{id} - Отримати конкретну платформу за її ідентифікатором;
– PUT /api/Platforms/{id} - Оновити інформацію про платформу за її ідентифікатором;
– DELETE /api/Platforms/{id} - Видалити платформу за її ідентифікатором.
Розклади:
– GET /api/Schedules - Отримати список розкладів;
– POST /api/Schedules - Створити новий розклад;
– GET /api/Schedules/{id} - Отримати конкретний розклад за його ідентифікатором;
– PUT /api/Schedules/{id} - Оновити інформацію про розклад за його ідентифікатором;
– DELETE /api/Schedules/{id} - Видалити розклад за його ідентифікатором.
Персонал:
– GET /api/Staffs - Отримати список персоналу;
– POST /api/Staffs - Створити нового працівника;
– GET /api/Staffs/{id} - Отримати конкретного працівника за його ідентифікатором;
– PUT /api/Staffs/{id} - Оновити інформацію про працівника за його ідентифікатором;
– DELETE /api/Staffs/{id} - Видалити працівника за його ідентифікатором.
Станції:
– GET /api/Stations - Отримати список станцій;
– POST /api/Stations - Створити нову станцію;
– GET /api/Stations/{id} - Отримати конкретну станцію за її ідентифікатором;
– PUT /api/Stations/{id} - Оновити інформацію про станцію за її ідентифікатором;
– DELETE /api/Stations/{id} - Видалити станцію за її ідентифікатором.
Поїзди:
– GET /api/Trains - Отримати список поїздів;
– POST /api/Trains - Створити новий поїзд;
– GET /api/Trains/{id} - Отримати конкретний поїзд за його ідентифікатором;
– PUT /api/Trains/{id} - Оновити інформацію про поїзд за його ідентифікатором;
– DELETE /api/Trains/{id} - Видалити поїзд за його ідентифікатором.

ВИСНОВКИ 

У результаті виконання лабораторної роботи було досягнуто поставленої мети створення надійної та ефективної серверної частини для системи управління маршрутами метро. Шляхом розробки архітектури серверної інфраструктури, створення API для взаємодії з клієнтськими додатками та реалізації необхідного функціоналу, включаючи керування маршрутами та оптимізацію системи, було досягнуто високої швидкодії та масштабованості системи. Результати цієї роботи будуть важливим внеском у розвиток та покращення існуючих систем управління маршрутами метро.


