1 АРХІТЕКТУРА СИСТЕМИ

Наведемо діагріми розроблені в минулих лабораторних роботах, а саме Use case діаграма(див. рис. 3.1) та ER-діаграма(див. рис. 3.2)
Рисунок 3.1 – Use case діаграма
Рисунок 1.2 – ER-діаграма
Технічні вимоги:
Розробка програмного забезпечення на платформі .NET з використанням інструменту розробки WinForms.
Інтеграція з пристроями IoT для збору та обробки даних про рух потягів та станцій метро.
Реалізація модуля для точного позиціонування потягів на мапі метро.
Забезпечення інтерфейсу користувача для відслідковування руху потягів та управління маршрутами.
IoT пристрій буде записувати дані в таблицю «Поїзд».
Наведемо діаграму компонентів розроблену в минулих роботах(див. рис. 3.3).
Рисунок 3.3 – Діаграма пакетів
Розглянемо на цій діаграмі блок керування поїздами та графіками. Саме цей блок відповідний частину системи, яка розробляється.
Наведемо діаграму розгортання (див. рис. 3.4).
Рисунок 3.4 – Діаграма розгортання
Розглянемо код системи, що розробляється, та етапи його виконання (див. дод. А):
Потяг відправляє свої координати: У цьому кроці розробляється функціональність, яка дозволяє потягам відправляти свої поточні координати. Це може бути реалізовано, наприклад, за допомогою GPS-модулів або інших систем позиціонування, які встановлені на поїздах.
Координати групуються в об’єкт: Після отримання координат потягу, вони групуються в об'єкт, який може містити іншу важливу інформацію про потяг, таку як ідентифікатор, час відправлення тощо. Цей об'єкт може бути структурованим даним, наприклад, JSON-об'єктом або об'єктом певного класу, який містить відповідні поля для зберігання координат та іншої інформації.
Пряме під’єднання до серверу: Після створення об'єкту з координатами і додатковою інформацією потрібно здійснити під'єднання до серверу. Це може бути здійснено напряму через мережу Інтернет або локальну мережу, в залежності від конкретних умов реалізації.
Відправка на сервер: Після встановлення з'єднання з сервером об'єкт з координатами і іншою інформацією відправляється на сервер. Для цього можуть використовуватися різні протоколи комунікації, такі як HTTP, TCP/IP або UDP. Відправка даних на сервер дозволяє зберегти інформацію про рух потягів для подальшої обробки та аналізу, що є важливим для ефективного керування маршрутами метро.

Висновки

Розроблена програма відображає принципи збору та передачі даних про рух потягів у системі управління маршрутами метро з використанням передових технологій. Вона дозволяє потягам відправляти свої координати на сервер, де ці дані можуть бути оброблені та використані для подальшого відслідковування руху, оптимізації маршрутів та забезпечення безпеки пасажирів.
Програма використовує пряме під'єднання до серверу для передачі даних, що дозволяє забезпечити швидку та ефективну комунікацію між потягами та центральним сервером. Координати потягів групуються в об'єкт для забезпечення структурованого та зручного управління даними.
В цілому, розроблена програма є важливим кроком у створенні комплексної системи управління маршрутами метро з використанням технологій Internet of Things (IoT), що дозволяє підвищити ефективність та безпеку метрополітену.

ДОДАТОК А

1.	INTERNAL CLASS TRAINPOS
2.	{
3.	PUBLIC INT CURRENTLOCATIONX { GET; SET; }
4.	PUBLIC INT CURRENTLOCATIONY { GET; SET; }
5.	PUBLIC INT ID { GET; SET; }
6.	}
7.	PRIVATE VOID BUTTON1_CLICK(OBJECT SENDER, EVENTARGS E)
8.	{
9.	VAR ID = INT.PARSE(NUMERICUPDOWN1.VALUE.TOSTRING());
10.	VAR X = INT.PARSE(NUMERICUPDOWN2.VALUE.TOSTRING());
11.	VAR Y = INT.PARSE(NUMERICUPDOWN3.VALUE.TOSTRING());
12.	VAR WEATHERCONDITION = NEW TRAINPOS()
13.	{
14.	ID = ID,
15.	CURRENTLOCATIONX = X,
16.	CURRENTLOCATIONY = Y,
17.	};
18.	USING (VAR CLIENT = NEW HTTPCLIENT())
19.	{
20.	STRING URL = "HTTPS://LOCALHOST:5001/API/TRAINS/" + ID;
21.	VAR JSON = JSONSERIALIZER.SERIALIZE(WEATHERCONDITION);
22.	VAR CONTENT = NEW STRINGCONTENT(JSON, ENCODING.UTF8, "APPLICATION/JSON");
23.	VAR REQUEST = NEW HTTPREQUESTMESSAGE(NEW HTTPMETHOD("PATCH"), URL)
24.	{
A.	CONTENT = CONTENT
25.	};
26.	TRY
27.	{
A.	VAR RESPONSE = CLIENT.SENDASYNC(REQUEST).RESULT;
28.	}
29.	CATCH (EXCEPTION EX)
30.	{
A.	MESSAGEBOX.SHOW("ERROR. MESSAGE: " + EX.MESSAGE);
31.	}
32.	}
33.	}
